webpackJsonp([11],{788:function(e,n,a){var o=a(15),r=a(45),t=a(290).PageRenderer;t.__esModule&&(t=t.default);var i=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:a(802)}},componentWillMount:function(){},render:function(){return o.createElement(t,Object.assign({},this.props,{content:this.state.content}))}});i.__catalog_loader__=!0,e.exports=i},802:function(e,n){e.exports='### Cliente Mobbex (cli)\n\nEl servicio de cliente por consola le permite acceder a Mobbex llamando al proceso desde otro sistema sin hacer mayores modificaciones al mismo y sin implementar el API. Actualmente s\xf3lo est\xe1 soportado el m\xf3dulo de Fidelizaci\xf3n.\n\n#### Windows\n- Descargar versi\xf3n para Windows: [Windows 32/64bits](https://github.com/mobbexdev/mobbex-cli/releases)\n\n#### Linux\n- Descargar versi\xf3n para Linux: [Linux](https://github.com/mobbexdev/mobbex-cli/releases)\n\n#### MacOS\n- Descargar versi\xf3n para MacOS: [MacOS](https://github.com/mobbexdev/mobbex-cli/releases)\n\n***Importante***   \nSiempre utilice la \xfaltima versi\xf3n disponible lo cual asegura el correcto funcionamiento.\n\n##### Ejecuci\xf3n\n\n- Fidelizaci\xf3n: Carga de Puntos\n\n> Recuerde que es necesario configurar como variables de Entorno el API-Key y Audit-Key provistos antes de la ejecuci\xf3n\n\n```\nmobbex-cli.exe loyalty {CUIT} charge -c {CREDENCIAL} -p {PUNTOS}\n```\n\n- Fidelizaci\xf3n: Cancelaci\xf3n de Carga\n\n> Recuerde que es necesario configurar como variables de Entorno el API-Key y Audit-Key provistos antes de la ejecuci\xf3n\n\n```\nmobbex-cli.exe loyalty {CUIT} cancel -i {ID_OPERACION}\n```\n\n#### Ejecuci\xf3n desde Visual Basic .NET\n\n```\nDim oProcess As New Process()\nDim oStartInfo As New ProcessStartInfo("mobbex-cli.exe", "... parametros ...")\noStartInfo.CreateNoWindow = True\noStartInfo.UseShellExecute = False\noStartInfo.RedirectStandardOutput = True\n\n\' Variables\noStartInfo.EnvironmentVariables.Add("APIKEY", "API Key");\noStartInfo.EnvironmentVariables.Add("AUDITKEY", "Audit Key");\n\noProcess.StartInfo = oStartInfo\noProcess.Start()\n\nDim sOutput As String\n\tUsing oStreamReader As System.IO.StreamReader = oProcess.StandardOutput\n    sOutput = oStreamReader.ReadToEnd()\nEnd Using\n\n\' Resultado\nConsole.WriteLine(sOutput)\n```\n\n__RESPUESTAS__\n\nEl cli siempre responder\xe1 en la consola en modo texto de la siguiente manera:\n\n- OK: {ID Operaci\xf3n}\n- ERROR: {Mensaje de Error}\n\nCuando la operaci\xf3n finaliza de manera correcta se retorna la palabra "OK: ..." con el c\xf3digo de la operaci\xf3n realizada lo que permitir\xe1 generar otras operaciones c\xf3mo por ejemplo la reversi\xf3n de la misma. Usted debe almacenar el c\xf3digo devuelto.\nCuando la operaci\xf3n finaliza con un error se retorna la palabra "ERROR: ..." con el mensaje correspondiente al error que se gener\xf3, el mismo puede ser mostrado al usuario.'}});
//# sourceMappingURL=11.ade23a10.chunk.js.map