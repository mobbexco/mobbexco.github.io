{"version":3,"sources":["webpack:///static/8.abdd1e25.chunk.js","webpack:///./catalog/pages/es/plugins/loyalty.md?afcc","webpack:///./catalog/pages/es/plugins/loyalty.md"],"names":["webpackJsonp","587","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","599"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KAAAG,YACAA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAAT,EAAA,OAEhBU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/8.abdd1e25.chunk.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 587:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(6);\n    var createReactClass = __webpack_require__(32);\n    var PageRenderer = __webpack_require__(209).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(599)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../../../node_modules/raw-loader/index.js!./loyalty.md\", function() {\n            component.setState({\n              content: require(\"!!../../../../node_modules/raw-loader/index.js!./loyalty.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 599:\n/***/ (function(module, exports) {\n\nmodule.exports = \"### Fidelización\\n\\nEl API de fidelización a diferencia de otros API requiere de 2 niveles de Claves de acceso al servicio debido a que el mismo es un servicio operado y auditado. A continuación se explica cómo generar un API Key para acceder a Mobbex y cómo obtener el Audit-Key para acceder al módulo de fidelización.\\n\\n#### API-Key\\n\\n```hint\\nPara comunicarse con nuestro API es necesario poseer un API Key y un Access Token. Para obtenerlos se deben seguir los siguientes pasos\\n\\n1) Ingresar a https://mobbex.com/console\\n2) Crear una cuenta si no posee\\n3) Una vez creada la cuenta de usuario, crear una Entidad utilizando el CUIT de la empresa.\\n4) Dirigirse desde el menú superior (3 puntos) a “Desarrollador”\\n5) Crear una nueva aplicación o utilizar una existente.\\n```\\n\\n#### Audit-Key: clave de auditoria\\n\\nPara crear una clave de auditoria debería generar su empresa en Mobbex, para ello luego de haber creado la cuenta en el punto anterior, dirijase a \\\"Crear Entidad\\\", ingrese su CUIT y valide los datos. Una vez que la entidad se encuentre creada provea su CUIT a la entidad operadora para que asocie su cuenta y genere su Audit-Key. Una vez asociado a la entidad operadora podrá ver en su consola un nuevo item con su Clave de Auditoria.\\n\\n#### URL del Servicio\\n```https://mobbex.com/p/loyalty```\\n\\n#### Cabeceras (Headers)\\n- ___x-api-key___: Clave API de su aplicación\\n- ___x-audit-key___: Clave de Auditoria\\n\\n### Servicios\\n\\n#### Búsqueda de Cuenta\\n- ___Tipo___ POST\\n- ___Url___ /accounts/search\\n\\n__Parámetros__\\n- ```reference```: Referencia a buscar, puede ser un DNI, una credencial o un email\\n- ```type```: Tipo de dato enviado. Opciones: identification, email, credential\\n\\n*Importante* Si se desea consultar por más de un tipo de dato se debe hacer más de una consulta.\\n\\n#### Creación de Cuenta\\n- ___Tipo___ POST\\n- ___Url___ /accounts/create\\n\\n__Parámetros__\\n- ```identification```: DNI del usuario.\\n- ```email``` Email del usuario.\\n- ```name``` (Opcional) Nombre del usuario\\n- ```phone``` (Opcional) Teléfono del usuario \\n- ```credential``` (Opcional) Número o Identificador de Credencial del usuario. Si no se provee un número de credencial el sistema creará una credencial virtual y retornará la misma.\\n- ```tax_id``` CUIT de la Entidad que realiza la creación de la cuenta. Debe ser una Entidad válida y asociada al Operador.\\n\\n*Importante* Los datos opcionales a pesar de ser justamente opcionales deberían ser completados siempre que sea posible.\\n\\n#### Balance de Cuenta\\n- ___Tipo___ GET\\n- ___Url___ /accounts/balance\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n\\n#### Carga de puntos\\n- ___Tipo___ POST\\n- ___Url___ /points/charge\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n- ```tax_id``` CUIT de la Entidad que realiza la carga de Puntos. Debe ser una Entidad válida y asociada al Operador.\\n- ```points``` Cantidad de puntos a cargar en la cuenta.\\n- ```reference``` Referencia de la operación de carga.\\n\\n### Enpoints Restringidos\\n\\nLas siguientes rutas requieren de permisos especiales y no podrán ser consultadas utilizando el Audit-Key.\\n\\n#### Transacciones\\n- ___Tipo___ GET\\n- ___Url___ /transactions\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n\\n#### Consumo de puntos\\n- ___Tipo___ POST\\n- ___Url___ /points/discharge\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n- ```points``` Cantidad de puntos a consumir en la cuenta.\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/8.abdd1e25.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../../../node_modules/raw-loader/index.js!./loyalty.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../../../node_modules/raw-loader/index.js!./loyalty.md\", function() {\n            component.setState({\n              content: require(\"!!../../../../node_modules/raw-loader/index.js!./loyalty.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/pages/es/plugins/loyalty.md\n// module id = 587\n// module chunks = 8","module.exports = \"### Fidelización\\n\\nEl API de fidelización a diferencia de otros API requiere de 2 niveles de Claves de acceso al servicio debido a que el mismo es un servicio operado y auditado. A continuación se explica cómo generar un API Key para acceder a Mobbex y cómo obtener el Audit-Key para acceder al módulo de fidelización.\\n\\n#### API-Key\\n\\n```hint\\nPara comunicarse con nuestro API es necesario poseer un API Key y un Access Token. Para obtenerlos se deben seguir los siguientes pasos\\n\\n1) Ingresar a https://mobbex.com/console\\n2) Crear una cuenta si no posee\\n3) Una vez creada la cuenta de usuario, crear una Entidad utilizando el CUIT de la empresa.\\n4) Dirigirse desde el menú superior (3 puntos) a “Desarrollador”\\n5) Crear una nueva aplicación o utilizar una existente.\\n```\\n\\n#### Audit-Key: clave de auditoria\\n\\nPara crear una clave de auditoria debería generar su empresa en Mobbex, para ello luego de haber creado la cuenta en el punto anterior, dirijase a \\\"Crear Entidad\\\", ingrese su CUIT y valide los datos. Una vez que la entidad se encuentre creada provea su CUIT a la entidad operadora para que asocie su cuenta y genere su Audit-Key. Una vez asociado a la entidad operadora podrá ver en su consola un nuevo item con su Clave de Auditoria.\\n\\n#### URL del Servicio\\n```https://mobbex.com/p/loyalty```\\n\\n#### Cabeceras (Headers)\\n- ___x-api-key___: Clave API de su aplicación\\n- ___x-audit-key___: Clave de Auditoria\\n\\n### Servicios\\n\\n#### Búsqueda de Cuenta\\n- ___Tipo___ POST\\n- ___Url___ /accounts/search\\n\\n__Parámetros__\\n- ```reference```: Referencia a buscar, puede ser un DNI, una credencial o un email\\n- ```type```: Tipo de dato enviado. Opciones: identification, email, credential\\n\\n*Importante* Si se desea consultar por más de un tipo de dato se debe hacer más de una consulta.\\n\\n#### Creación de Cuenta\\n- ___Tipo___ POST\\n- ___Url___ /accounts/create\\n\\n__Parámetros__\\n- ```identification```: DNI del usuario.\\n- ```email``` Email del usuario.\\n- ```name``` (Opcional) Nombre del usuario\\n- ```phone``` (Opcional) Teléfono del usuario \\n- ```credential``` (Opcional) Número o Identificador de Credencial del usuario. Si no se provee un número de credencial el sistema creará una credencial virtual y retornará la misma.\\n- ```tax_id``` CUIT de la Entidad que realiza la creación de la cuenta. Debe ser una Entidad válida y asociada al Operador.\\n\\n*Importante* Los datos opcionales a pesar de ser justamente opcionales deberían ser completados siempre que sea posible.\\n\\n#### Balance de Cuenta\\n- ___Tipo___ GET\\n- ___Url___ /accounts/balance\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n\\n#### Carga de puntos\\n- ___Tipo___ POST\\n- ___Url___ /points/charge\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n- ```tax_id``` CUIT de la Entidad que realiza la carga de Puntos. Debe ser una Entidad válida y asociada al Operador.\\n- ```points``` Cantidad de puntos a cargar en la cuenta.\\n- ```reference``` Referencia de la operación de carga.\\n\\n### Enpoints Restringidos\\n\\nLas siguientes rutas requieren de permisos especiales y no podrán ser consultadas utilizando el Audit-Key.\\n\\n#### Transacciones\\n- ___Tipo___ GET\\n- ___Url___ /transactions\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n\\n#### Consumo de puntos\\n- ___Tipo___ POST\\n- ___Url___ /points/discharge\\n\\n__Parámetros__\\n- ```credential``` Número de credencial obtenido usando la búsqueda.\\n- ```points``` Cantidad de puntos a consumir en la cuenta.\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/pages/es/plugins/loyalty.md\n// module id = 599\n// module chunks = 8"],"sourceRoot":""}